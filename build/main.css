@import url(https://fonts.googleapis.com/css?family=Nunito:400,300,700|Roboto:300,400,700|Roboto+Mono);
@import url(https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css);
@import url(//fonts.googleapis.com/css?family=Lato:300:400);
/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:content-box;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:transparent}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-0.25em}sup{top:-0.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type=button],[type=reset],[type=submit]{-webkit-appearance:button}button::-moz-focus-inner,[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:baseline}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}template{display:none}[hidden]{display:none}html,body{width:100%;margin:0}h2,figure{padding:0;margin:0}
body{margin:0}h1{font-family:"Lato",sans-serif;font-weight:300;letter-spacing:2px;font-size:48px}p{font-family:"Lato",sans-serif;letter-spacing:1px;font-size:14px;color:#333}.header{position:relative;text-align:center;background:linear-gradient(60deg, rgb(84, 58, 183) 0%, rgb(0, 172, 193) 100%);color:#fff}.logo{width:50px;fill:#fff;padding-right:15px;display:inline-block;vertical-align:middle}.inner-header{height:65vh;width:100%;margin:0;padding:0}.flex{display:flex;justify-content:center;align-items:center;text-align:center}.waves{position:relative;width:100%;height:15vh;margin-bottom:-7px;min-height:100px;max-height:150px}.content{position:relative;height:20vh;text-align:center;background-color:#fff}.parallax>use{animation:move-forever 25s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite}.parallax>use:nth-child(1){animation-delay:-2s;animation-duration:7s}.parallax>use:nth-child(2){animation-delay:-3s;animation-duration:10s}.parallax>use:nth-child(3){animation-delay:-4s;animation-duration:13s}.parallax>use:nth-child(4){animation-delay:-5s;animation-duration:20s}@keyframes move-forever{0%{transform:translate3d(-90px, 0, 0)}100%{transform:translate3d(85px, 0, 0)}}@media(max-width: 768px){.waves{height:40px;min-height:40px}.content{height:30vh}h1{font-size:24px}}.news-app{color:#333}.news-app .search{font-family:"Nunito",sans-serif;max-width:600px;padding:0 3%;margin:2.5em auto 1em auto}.news-app .search__wrapper{position:relative;display:flex;justify-content:space-between;height:3em;border-bottom:1px solid rgba(0,0,0,.12)}.news-app .search__field{width:100%;text-align:center;font-size:1.5em;font-weight:300;margin:0 1em;border:none;background:none}.news-app .search__field:focus-visible{outline:0}.news-app .search__field::placeholder{font-weight:300;opacity:.3}.news-app .search__icon{display:block;width:1em;height:1.4em}.news-app .search__icon .fa-magnifying-glass{display:inline;font-size:1.2em}.news-app .search__icon .fa-circle-notch{display:none}.news-app .search__btn{cursor:pointer;background:none;border:none;line-height:1.5em;padding:0 .4em}.news-app .search__btn_loading .search__icon .fa-magnifying-glass{display:none}.news-app .search__btn_loading .search__icon .fa-circle-notch{display:block;animation-name:spin;animation-duration:800ms;animation-iteration-count:infinite;animation-timing-function:linear}.news-app .articles{max-width:700px;display:flex;gap:2em;flex-direction:column;padding:4em 3%;margin:0 auto}.news-app .article{width:100%;font-family:Roboto,sans-serif;position:relative;box-sizing:border-box;border-radius:2px;padding:2em 2.5em;margin:0 auto;box-shadow:0 1px 6px rgba(0,0,0,.12),0 1px 4px rgba(0,0,0,.12)}.news-app .article__title{font-size:1.4em;text-align:center;margin:.8em 0 1em 0}.news-app .article__publish-date,.news-app .article__author{position:absolute;top:.8em;right:0;width:50%;font-family:Roboto Mono,sans-serif;font-size:.8em;font-weight:300;text-align:right;text-transform:uppercase;opacity:.8;padding:.3em 3% .2em 0;background:linear-gradient(to right, hsla(0, 0%, 100%, 0), #eeeded)}.news-app .article__author{left:0;right:auto;text-align:left;padding-left:3%;background:linear-gradient(to left, hsla(0, 0%, 100%, 0), #eeeded)}.news-app .article__image{filter:grayscale(100%);transition:filter .3s}.news-app .article__image img{width:100%;height:auto}.news-app .article__content{overflow-wrap:anywhere;margin:1em 0}.news-app .article__time-for-reading{font-family:Roboto Mono,sans-serif;text-align:right;font-size:.8em}.news-app .article:hover .article__image{filter:none}.news-app .load-more{display:flex;justify-content:center;padding:1em 0 2em 0}.news-app .load-more__btn{position:relative;width:30%;font-family:Roboto Mono,sans-serif;text-transform:uppercase;font-size:1.2em;border:none;padding:.5em 0;background:rgba(0,0,0,.07);cursor:pointer}.news-app .load-more__btn .loading{display:none;position:absolute;left:1em}.news-app .load-more__btn_loading .loading{display:block}.news-app .load-more__btn_hidden{visibility:hidden}.news-app .fa-circle-notch.loading{animation-name:spin;animation-duration:800ms;animation-iteration-count:infinite;animation-timing-function:linear}@keyframes spin{from{transform:rotate(0deg)}to{transform:rotate(360deg)}}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/